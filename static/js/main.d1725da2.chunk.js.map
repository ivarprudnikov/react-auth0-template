{"version":3,"sources":["auth_config.js","react-auth0-spa.js","components/NavBar.js","components/Profile.js","utils/history.js","components/PrivateRoute.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["domain","clientId","scope","loginCallbackUrl","packageJson","homepage","logoutRedirectUrl","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","NavBar","isAuthenticated","loginWithRedirect","logoutWithRedirect","className","to","process","type","onClick","Profile","loading","user","src","picture","alt","name","email","JSON","stringify","createBrowserHistory","PrivateRoute","Component","component","path","rest","useEffect","a","async","appState","targetUrl","render","props","Home","App","exact","REACT_APP_VERSION","href","Boolean","hostname","match","ReactDOM","children","onRedirectCallback","useState","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","createAuth0Client","config","client_id","redirect_uri","auth0FromHook","search","includes","handleRedirectCallback","getUser","initAuth0","catch","e","console","error","replace","getTokenSilently","accessToken","raw","decoded","jwt_decode","Provider","value","getIdTokenClaims","hasAnyScopeAsync","scopes","token","tokenScopes","split","length","some","s","indexOf","getTokenWithPopup","logout","returnTo","push","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1725da2.chunk.js","sourcesContent":["import packageJson from '../package.json';\n\nexport default {\n  domain: \"ivarprudnikov.eu.auth0.com\",\n  clientId: \"EuHrJlslqdI6h5UOuAMtau6maPa05lRd\",\n  scope: \"openid profile email\",\n  loginCallbackUrl: process.env.NODE_ENV === 'production' ? packageJson.homepage : window.location.origin,\n  logoutRedirectUrl: process.env.NODE_ENV === 'production' ? packageJson.homepage : window.location.origin\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport createAuth0Client from '@auth0/auth0-spa-js';\nimport config from './auth_config';\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext({});\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [auth0Client, setAuth0] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  if (typeof onRedirectCallback !== 'function') {\n    onRedirectCallback = DEFAULT_REDIRECT_CALLBACK;\n  }\n\n  /**\n   * Should run only once as options do not change\n   */\n  useEffect(() => {\n    const initAuth0 = async () => {\n\n      const auth0FromHook = await createAuth0Client({\n        domain: config.domain,\n        client_id: config.clientId,\n        scope: config.scope,\n        redirect_uri: config.loginCallbackUrl\n      });\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes('code=')) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n\n    initAuth0()\n      .catch((e) => {\n        console.error('initAuth0 failure', e);\n        window.location.replace('/');\n      });\n\n  }, [onRedirectCallback]);\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n\n  const getTokenSilently = async () => {\n    const accessToken = await auth0Client.getTokenSilently();\n    return { raw: accessToken, decoded: jwt_decode(accessToken) };\n  };\n\n  const hasAnyScopeAsync = async (scopes) => {\n    const token = await getTokenSilently();\n    const tokenScopes = (token.decoded.scope || '').split(/\\W/);\n    return scopes && scopes.length && scopes.some(s => tokenScopes.indexOf(s) > -1);\n  };\n\n  const logoutWithRedirect = () => auth0Client.logout({\n    returnTo: config.logoutRedirectUrl\n  });\n\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently,\n        hasAnyScopeAsync,\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logoutWithRedirect\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};\n","import React from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n  const { isAuthenticated, loginWithRedirect, logoutWithRedirect } = useAuth0();\n\n  return (<nav className=\"navbar navbar-expand navbar-light bg-light\">\n    <div className=\"container\">\n      <Link className=\"navbar-brand\" to={process.env.PUBLIC_URL + \"/\"}>\n        Brnd\n      </Link>\n      <ul className=\"navbar-nav mr-auto\">\n        <li className=\"nav-item-divider\"/>\n      </ul>\n      {!isAuthenticated && (<ul className=\"navbar-nav\">\n        <form className=\"form-inline\">\n          <button className=\"btn btn-outline-primary\"\n                  type=\"button\"\n                  onClick={() => loginWithRedirect({})}>\n            Log in\n          </button>\n        </form>\n      </ul>)}\n      {isAuthenticated && (<>\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to={process.env.PUBLIC_URL + \"/\"}>Home</Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to={process.env.PUBLIC_URL + \"/profile\"}>Profile</Link>\n          </li>\n        </ul>\n        <form className=\"form-inline ml-4\">\n          <button className=\"btn btn-outline-secondary\"\n                  type=\"button\"\n                  onClick={() => logoutWithRedirect()}>\n            Log out\n          </button>\n        </form>\n      </>)}\n    </div>\n  </nav>);\n\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n\n  if (loading || !user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-2\">\n          <img src={user.picture} alt=\"Profile\" className=\"img-fluid\" />\n        </div>\n        <div className=\"col-sm-4\">\n          <h2>{user.name}</h2>\n          <p>{user.email}</p>\n        </div>\n        <div className=\"col-sm-6\">\n          <code className=\"p-3 bg-dark text-light d-block\">{JSON.stringify(user, null, 2)}</code>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\n\n  useEffect(() => {\n    if (loading || isAuthenticated) {\n      return;\n    }\n    const fn = async () => {\n      await loginWithRedirect({\n        appState: { targetUrl: path }\n      });\n    };\n    fn();\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\n\n  const render = props =>\n    isAuthenticated === true ? <Component {...props} /> : null;\n\n  return <Route path={path} render={render} {...rest} />;\n};\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n  return (\n    <div className=\"container text-center\">\n      <h1 className=\"display-1\">Super fancy app</h1>\n      <div className=\"mt-5\">\n        <Link className=\"btn btn-lg btn-primary mr-2\" to={process.env.PUBLIC_URL + \"/profile\"}>Protected profile page</Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport Profile from \"./components/Profile\";\nimport history from \"./utils/history\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"d-flex min-vh-100 flex-column justify-content-between\">\n      <Router history={history}>\n        <header>\n          <NavBar />\n        </header>\n        <main>\n          <Switch>\n            <Route path={process.env.PUBLIC_URL + \"/\"} exact component={Home}/>\n            <PrivateRoute path={process.env.PUBLIC_URL + \"/profile\"} component={Profile} />\n          </Switch>\n        </main>\n        <footer className=\"p-4 text-center bg-primary text-light\">\n          <div className=\"container\">\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <small>Version: {window.REACT_APP_VERSION}</small>\n              <span className=\"mx-auto\"></span>\n              <a href=\"https://github.com/ivarprudnikov/react-auth0-template\" className=\"btn btn-sm btn-outline-light mr-3\">Source code on Github</a>\n              <a href=\"https://www.ivarprudnikov.com/auth0-authentication-website-react/\" className=\"btn btn-sm btn-outline-light\">About this implementation</a>\n            </div>\n          </div>\n        </footer>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport history from \"./utils/history\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider onRedirectCallback={onRedirectCallback}>\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}